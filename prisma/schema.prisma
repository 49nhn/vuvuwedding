// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model User {
    id        String     @id @default(auto()) @map("_id") @db.ObjectId
    username  String     @unique
    phone     String
    password  String
    createdAt DateTime   @default(now())
    deletedAt DateTime?
    isDeleted Boolean    @default(false)
    roles     Role?      @relation(fields: [roleId], references: [id])
    roleId    String?    @db.ObjectId
    employee  Employee[]
    salesman  Salesman?
}

model Role {
    id          String       @id @default(auto()) @map("_id") @db.ObjectId
    name        String       @unique
    Permissions Permission[]
    User        User[]
}

model Permission {
    id     String @id @default(auto()) @map("_id") @db.ObjectId
    name   String @unique
    Role   Role   @relation(fields: [roleId], references: [id])
    roleId String @db.ObjectId
}

model Employee {
    id             String        @id @default(auto()) @map("_id") @db.ObjectId
    name           String
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt
    deletedAt      DateTime?
    isDeleted      Boolean       @default(false)
    Decoration     Decoration?   @relation(fields: [decorationId], references: [id])
    decorationId   String?       @db.ObjectId
    Photo          Photo?        @relation(fields: [photoId], references: [id])
    photoId        String?       @db.ObjectId
    MakeUp         MakeUp?       @relation(fields: [makeUpId], references: [id])
    makeUpId       String?       @db.ObjectId
    WeddingFruit   WeddingFruit? @relation(fields: [weddingFruitId], references: [id])
    weddingFruitId String?       @db.ObjectId
    User           User?         @relation(fields: [userId], references: [id])
    userId         String?       @db.ObjectId
}

model Salesman {
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
    isDeleted Boolean   @default(false)
    user      User      @relation(fields: [userId], references: [id])
    userId    String    @unique @db.ObjectId
    Show      Show[]
}

model Show {
    id           String         @id @default(auto()) @map("_id") @db.ObjectId
    name         String
    status       String         @default("pending")
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    deletedAt    DateTime?
    isDeleted    Boolean        @default(false)
    Decoration   Decoration[]
    Photo        Photo[]
    MakeUp       MakeUp[]
    WeddingFruit WeddingFruit[]
    Salesman     Salesman?      @relation(fields: [salesmanId], references: [id])
    salesmanId   String?        @db.ObjectId
    Invoice      Invoice?
}

model Invoice {
    id     String   @id @default(auto()) @map("_id") @db.ObjectId
    name   String
    desc   String
    date   DateTime
    Show   Show     @relation(fields: [showId], references: [id])
    showId String   @unique @db.ObjectId
}

model Decoration {
    id       String     @id @default(auto()) @map("_id") @db.ObjectId
    name     String
    desc     String
    Show     Show       @relation(fields: [showId], references: [id])
    showId   String     @db.ObjectId
    employee Employee[]
}

model Photo {
    id       String     @id @default(auto()) @map("_id") @db.ObjectId
    name     String
    desc     String
    url      String
    date     DateTime
    Show     Show       @relation(fields: [showId], references: [id])
    showId   String     @db.ObjectId
    employee Employee[]
}

model MakeUp {
    id       String     @id @default(auto()) @map("_id") @db.ObjectId
    name     String
    desc     String
    date     DateTime
    Show     Show       @relation(fields: [showId], references: [id])
    showId   String     @db.ObjectId
    employee Employee[]
}

model WeddingFruit {
    id       String     @id @default(auto()) @map("_id") @db.ObjectId
    name     String
    desc     String
    date     DateTime
    Show     Show       @relation(fields: [showId], references: [id])
    showId   String     @db.ObjectId
    employee Employee[]
}
