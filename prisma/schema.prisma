// This is your Prisma schema file,// learn more about it in the docs: https://pris.ly/d/prisma-schemagenerator client {  provider = "prisma-client-js"}datasource db {  provider = "sqlserver"  url      = env("DATABASE_URL")}model User {  id          Int          @id @default(autoincrement())  username    String       @unique @db.VarChar(30)  password    String       @db.VarChar(255)  createdAt   DateTime     @default(now())  deletedAt   DateTime?  isDeleted   Boolean      @default(false)  fullName    String?      @db.NVarChar(30)  email       String?      @db.VarChar(30)  phone       String?      @db.VarChar(30)  address     String?      @db.NVarChar(255)  salary      Float        @default(0)  bonus       Float        @default(0)  birthday    DateTime?  departments Department[]  ShowBooking Shows[]  roles       Role[]}model Role {  id          Int          @id @default(autoincrement())  name        String       @unique @db.VarChar(60)  description String?      @db.NVarChar(255)  permissions Permission[]  Users       User[]}model Permission {  id    Int    @id @default(autoincrement())  name  String @unique @db.VarChar(60)  Roles Role[]}model Department {  id          Int     @id @default(autoincrement())  name        String  @unique @db.NVarChar(100)  description String? @db.NVarChar(255)  users       User[]}model NumberingConfig {  id                Int     @id @default(autoincrement())  name              String  @unique @db.NVarChar(100)  paddingZeroNumber Int     @default(4)  prefix            String? @db.VarChar(30)  suffix            String? @db.VarChar(30)  currentNumber     Int     @default(0)}model Shows {  id            Int      @id @default(autoincrement())  title         String   @db.NVarChar(255)  status        Int      @default(0) // 0: chưa đặt cọc, 1: đã đặt cọc, 2: đã thanh toán, 3: đã hủy  totalPrice    Float    @default(0) @db.Money  flowerGate    String?  @db.NVarChar(100)  description   String?  brideName     String?  @db.NVarChar(100)  bridePhone    String?  @db.VarChar(30)  brideAddress  String?  @db.NVarChar(255)  groomName     String?  @db.NVarChar(100)  groomPhone    String?  @db.VarChar(30)  groomAddress  String?  @db.NVarChar(255)  otherContact  String?  @db.NVarChar(255)  dateShowStart DateTime  dateShowEnd   DateTime  saleMan       User?    @relation(fields: [saleManId], references: [id])  saleManId     Int?  Decorations     Decoration[]  WeddingPresents WeddingPresent[]  Photos          Photo[]  Makeups         Makeup[]  WeddingDresses  WeddingDress[]  WeddingFlowers  WeddingFlower[]  Others          Other[]  createdAt DateTime  @default(now())  updatedAt DateTime  @updatedAt  deletedAt DateTime?  isDeleted Boolean   @default(false)}model Decoration {  id           Int     @id @default(autoincrement())  title        String  @db.NVarChar(255)  description  String?  status       Int     @default(0)  ceremonyType Int     @default(0)  totalPrice   Float   @default(0)  PackAncestral   PackAncestral? @relation(fields: [packAncestralId], references: [id])  packAncestralId Int?  createdAt DateTime  @default(now())  updatedAt DateTime  @updatedAt  deletedAt DateTime?  isDeleted Boolean   @default(false)  Show      Shows?    @relation(fields: [showId], references: [id])  showId    Int?}model Photo {  id          Int     @id @default(autoincrement())  title       String  @db.NVarChar(255)  description String?  status      Int     @default(0)  Show        Shows?  @relation(fields: [showId], references: [id])  showId      Int?}model WeddingPresent {  id          Int     @id @default(autoincrement())  title       String  @db.NVarChar(255)  description String?  status      Int     @default(0)  Show        Shows?  @relation(fields: [showId], references: [id])  showId      Int?}model Makeup {  id          Int     @id @default(autoincrement())  title       String  @db.NVarChar(255)  description String?  status      Int     @default(0)  Show        Shows?  @relation(fields: [showId], references: [id])  showId      Int?}model WeddingDress {  id          Int     @id @default(autoincrement())  title       String  @db.NVarChar(255)  description String?  status      Int     @default(0)  Show        Shows?  @relation(fields: [showId], references: [id])  showId      Int?}model WeddingFlower {  id          Int     @id @default(autoincrement())  title       String  @db.NVarChar(255)  description String?  status      Int     @default(0)  Show        Shows?  @relation(fields: [showId], references: [id])  showId      Int?}model Other {  id          Int     @id @default(autoincrement())  title       String  @db.NVarChar(255)  description String?  status      Int     @default(0)  Show        Shows?  @relation(fields: [showId], references: [id])  showId      Int?}model PackAncestral {  id             Int          @id @default(autoincrement())  name           String       @db.NVarChar(100)  flowerGateType Int          @default(0) // 0: không có cổng hoa, 1: cổng hoa lụa, 2: cổng hoa tươi  flower         Int          @default(0) // 0: không có hoa , 1: hoa lua 2:  hoa tươi  flowerTable    Int          @default(0) // 0: không có hoa , 1: hoa lua 2:  hoa tươi  priceStart     Float        @default(0)  priceEnd       Float        @default(0)  description    String?      @db.NVarChar(500)  decorations    Decoration[]}model Inventory {  id         Int        @id @default(autoincrement())  name       String     @unique @db.NVarChar(100)  items      Item[]  categories Category[]}model Item {  id          Int       @id @default(autoincrement())  name        String    @unique @db.NVarChar(100)  quantity    Int       @default(0)  description String?   @db.NVarChar(500)  consumable  Boolean   @default(false)  price       Float     @default(0)  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)  inventoryId Int  category    Category  @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)  categoryId  Int}model Category {  id          Int       @id @default(autoincrement())  name        String    @unique @db.NVarChar(100)  description String?   @db.NVarChar(500)  inventory   Inventory @relation(fields: [inventoryId], references: [id])  inventoryId Int  items       Item[]}